"""
Django settings for xy_neo4j project.

Generated by 'django-admin startproject' using Django 3.2.

For more information on this file, see
https://docs.djangoproject.com/en/3.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.2/ref/settings/
"""

from pathlib import Path
import os

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-j^gdmnj#)*-%e$df9gsf&$(*l+*t=e3mi#&m-^)_xf-@msk1yc'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []

# 媒体文件配置
MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')

# 文件上传设置
FILE_UPLOAD_MAX_MEMORY_SIZE = 10 * 1024 * 1024  # 10MB
DATA_UPLOAD_MAX_MEMORY_SIZE = 10 * 1024 * 1024  # 10MB

# 允许的图片格式
ALLOWED_IMAGE_TYPES = ['image/jpeg', 'image/png', 'image/gif', 'image/webp', 'image/bmp']
MAX_IMAGE_SIZE = 10 * 1024 * 1024  # 10MB

# Application definition
INSTALLED_APPS = [
    'simpleui',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django_extensions',
    'myneo4j',
    'accounts'
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'xy_neo4j.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [
            os.path.join(BASE_DIR, 'templates')
        ],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'xy_neo4j.wsgi.application'

# Database
# https://docs.djangoproject.com/en/3.2/ref/settings/#databases
LLM_PROVIDERS = {
    'kimi': 'KIMI',
    'ali': 'ALI',
    'zhipu': 'ZHIPU',
    'deepseek': 'DEEPSEEK'
}

# 默认模型 (建议选择最稳定的)
DEFAULT_LLM = 'kimi'

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}

# Password validation
# https://docs.djangoproject.com/en/3.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
# https://docs.djangoproject.com/en/3.2/topics/i18n/

LANGUAGE_CODE = 'zh-hans'
TIME_ZONE = 'Asia/Shanghai'
USE_I18N = True
USE_L10N = True
USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.2/howto/static-files/

STATIC_URL = '/static/'
STATIC_DIRS = (
    os.path.join(BASE_DIR, 'static')
)
STATICFILES_DIRS = (
    os.path.join(BASE_DIR, 'static'),
)

# Default primary key field type
# https://docs.djangoproject.com/en/3.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

X_FRAME_OPTIONS = 'SAMEORIGIN'

DATAS_DIR = os.path.join(BASE_DIR, "datas")

# API Keys
ZHIPUAI_API_KEY = '9c62676e51d84d09955cc6ade617491d.4LKMlx2Zvk6849TV'
DEEPSEEK_API_KEY = 'sk-f77a1ecc09754fe3ac7c8a69108e13e8'
DOUBAO_API_KEY = '4cb99985-8f4d-4a3e-a300-c89620fab2ae'
ANYUE_API_KEY = 'sk-Fj9mAA1l3SKLWAJZJLAQvCn0gFX7HlANQInZPCKH8PSQkndl'
ALIBABA_API_KEY = 'sk-90150b755c654c4d9765798ef995c540'

# SimpleUI 配置
SIMPLEUI_HOME_INFO = False
SIMPLEUI_ANALYSIS = False

# 用户模型配置
AUTH_USER_MODEL = 'accounts.UserProfile'
LOGIN_URL = '/accounts/login'
LOGIN_REDIRECT_URL = '/'
LOGOUT_URL = '/accounts/logout'

# 导入所有必需的模块 - 确保按正确顺序导入
from .question_classifier import *
from .question_parser import *
from .answer_search import *
from .get_zhipu_response import *
from .get_deepseek_response import *
from .get_ali_response import GetAliResponse
from .get_kimi_response import GetKimiResponse
from .get_ali_vision_response import GetAliVisionResponse  # 导入视觉模型

# 实例化所有AI模型 - 关键修复：添加ALI_VISION实例化
CLASSIFIER = QuestionClassifier()
PARSER = QuestionPaser()
SEACHER = AnswerSearcher()
ZHIPU = GetZhipuResponse()
DEEPSEEK = GetDeepSeekResponse()
ALI = GetAliResponse()
KIMI = GetKimiResponse()
ALI_VISION = GetAliVisionResponse()  # 关键修复：实例化阿里云视觉模型
# 在 settings.py 的末尾添加以下日志配置

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': '{levelname} {asctime} {module} {process:d} {thread:d} {message}',
            'style': '{',
        },
        'simple': {
            'format': '{levelname} {message}',
            'style': '{',
        },
    },
    'handlers': {
        'file': {
            'level': 'DEBUG',
            'class': 'logging.FileHandler',
            'filename': os.path.join(BASE_DIR, 'debug.log'),
            'formatter': 'verbose',
        },
        'console': {
            'level': 'DEBUG',
            'class': 'logging.StreamHandler',
            'formatter': 'simple',
        },
    },
    'loggers': {
        'myneo4j.views': {
            'handlers': ['file', 'console'],
            'level': 'DEBUG',
            'propagate': True,
        },
        'myneo4j.get_ali_vision_response': {
            'handlers': ['file', 'console'],
            'level': 'DEBUG',
            'propagate': True,
        },
    },
}